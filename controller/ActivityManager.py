import tkinter

from controller.ActivityTracker import ActivityTracker
from view.TopLevelWidget import TopLevelWidget
from model.ActivityData import ActivityData
from utils.time_utils import formatted_time


class ActivityManager:
    """Root class for activity manager.
    Has:
    + main view widget
    + activityData structure
    + activity tracker

    Does:
    - updates model according to events
    - updates main view from model data
    """

    def __init__(self, tk_parent, stopwatch_count=5, inactivity_period=3, **kw):

        # initialization
        self.stopwatch_count = stopwatch_count
        self.last_active_stopwatch_id = 0
        self.stopwatch_active = False
        self.activity_tracker = ActivityTracker(inactivity_period, self.on_active_tick)

        # create corresponding models
        self.activity_data = ActivityData()

        # create view
        self.main_view = TopLevelWidget(
            tk_parent=tk_parent,
            controller=self,
            stopwatch_count=stopwatch_count,
            add_stopwatch_callback=self.on_new_stopwatch_creation)

    def on_active_tick(self):
        """Do this on every 'tick' event generated by ActivityTracker"""
        print("tick!")
        self.activity_data.add_time(self.last_active_stopwatch_id, 1)
        self.update_active_widget()
        self.update_summary()

    def on_new_stopwatch_creation(self):
        print("works!")
        self.stopwatch_count += 1
        self.activity_data.expand_to_requested_size(self.stopwatch_count)
        self.update_all_widgets()

    def update_active_widget(self):
        time_str = formatted_time(self.activity_data.get_time(self.last_active_stopwatch_id))
        self.main_view.set_stopwatch_time(self.last_active_stopwatch_id, time_str)

    def update_summary(self):
        time_summary_str = formatted_time(self.activity_data.get_time_summary())
        self.main_view.set_summary(time_summary_str)

    def update_all_widgets(self):
        for stopwatch_id in range(self.stopwatch_count):
            time_str = formatted_time(self.activity_data.get_time(stopwatch_id))
            self.main_view.set_stopwatch_time(stopwatch_id, time_str)
            self.main_view.set_stopwatch_description(stopwatch_id, self.activity_data.get_description(stopwatch_id))
        self.update_summary()

    def notice_start(self, stopwatch_id):
        print(f"widget: {stopwatch_id=} start button clicked")
        self.last_active_stopwatch_id = stopwatch_id
        self.activity_tracker.activate()

    def notice_stop(self, stopwatch_id):
        print(f"widget: {stopwatch_id=} stop button clicked")
        if self.last_active_stopwatch_id == stopwatch_id:
            self.activity_tracker.deactivate()

    def notice_entry_update(self, stopwatch_id, new_text):
        print(f"widget: {stopwatch_id=} entry field changed: {new_text}")
        self.activity_data.update_description(stopwatch_id, new_description=new_text)

    def update_model_from_json(self, new_stopwatch_data):
        self.activity_data.add_stopwatches_from_json_list(new_stopwatch_data["stopwatches"])
        self.activity_data.expand_to_requested_size(self.stopwatch_count)
        self.update_all_widgets()


if __name__ == "__main__":
    root = tkinter.Tk()
    am = ActivityManager(root)
    root.title("NotAMinuteLonger")
    root.resizable(width="false", height="false")
    root.mainloop()



