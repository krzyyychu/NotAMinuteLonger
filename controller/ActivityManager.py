import tkinter
import time

from controller.ActivityTracker import ActivityTracker
from view.StopwatchWidget import StopwatchWidget
from view.SummaryWidget import SummaryWidget
from model.ActivityData import ActivityData
from utils.time_utils import formatted_time


class ActivityManager:
    """Root class for activity manager.

    Has:
    + it's main tkinter.Frame
    + list of stopwatches
    + summary widget
    + activity tracker
    + activityData structure
    - settings object

    Does:
    manages stopwatch list so only 1 stopwatch runs in parallel
    TODO: extract tk elements to single top layer widget
    """

    def __init__(self, tk_parent, stopwatch_count=5, inactivity_period=3, **kw):
        self.frame = tkinter.Frame(tk_parent, kw)

        # create list of stopwatch views
        self.num_of_stopwatches = stopwatch_count
        self.stopwatches = []
        for stopwatch_id in range(stopwatch_count):
            stopwatch = StopwatchWidget(
                tk_parent=self.frame,
                stopwatch_id=stopwatch_id,
                start_button_callback=self.notice_start,
                stop_button_callback=self.notice_stop,
                entry_update_callback=self.notice_entry_update)
            self.stopwatches.append(stopwatch)
            stopwatch.pack()
        self.add_button = tkinter.Button(self.frame, text="+", command=self.add_clicked)
        self.add_button.pack(side=tkinter.LEFT)
        self.summary = SummaryWidget(self.frame)
        self.summary.pack()

        self.frame.pack()

        # create corresponding models
        self.activity_data = ActivityData()

        # perform rest of initialization
        self.last_active_stopwatch_id = 0
        self.stopwatch_active = False

        self.activity_tracker = ActivityTracker(inactivity_period, self.on_active_tick)

    def on_active_tick(self):
        """Do this on every 'tick' event generated by ActivityTracker"""
        print("tick!")
        self.activity_data.add_time(self.last_active_stopwatch_id, 1)
        self.update_active_widget()
        self.update_summary()

    def update_active_widget(self):
        time_str = formatted_time(self.activity_data.get_time(self.last_active_stopwatch_id))
        self.stopwatches[self.last_active_stopwatch_id].set_time(time_str)

    def update_summary(self):
        time_summary_str = formatted_time(self.activity_data.get_time_summary())
        self.summary.set_time(time_summary_str)

    def update_all_widgets(self):
        for stopwatch in self.stopwatches:
            stopwatch_id = stopwatch.get_id()
            time_str = formatted_time(self.activity_data.get_time(stopwatch_id))
            self.stopwatches[stopwatch_id].set_time(time_str)
            self.stopwatches[stopwatch_id].set_task_description(self.activity_data.get_description(stopwatch_id))
        self.update_summary()

    def notice_start(self, stopwatch_id):
        print(f"widget: {stopwatch_id=} start button clicked")
        self.last_active_stopwatch_id = stopwatch_id
        self.activity_tracker.activate()

    def notice_stop(self, stopwatch_id):
        print(f"widget: {stopwatch_id=} stop button clicked")
        if self.last_active_stopwatch_id == stopwatch_id:
            self.activity_tracker.deactivate()

    def notice_entry_update(self, stopwatch_id, new_text):
        print(f"widget: {stopwatch_id=} entry field changed: {new_text}")
        self.activity_data.update_description(stopwatch_id, new_description=new_text)

    def update_model_from_json(self, new_stopwatch_data):
        self.activity_data.add_stopwatches_from_json_list(new_stopwatch_data["stopwatches"])
        self.activity_data.expand_to_requested_size(self.num_of_stopwatches)
        self.update_all_widgets()

    def add_clicked(self):
        stopwatch = StopwatchWidget(
            tk_parent=self.frame,
            stopwatch_id=self.num_of_stopwatches,
            start_button_callback=self.notice_start,
            stop_button_callback=self.notice_stop,
            entry_update_callback=self.notice_entry_update)
        self.num_of_stopwatches += 1
        self.stopwatches.append(stopwatch)
        stopwatch.pack()
        self.frame.update()


if __name__ == "__main__":
    root = tkinter.Tk()
    am = ActivityManager(root)
    root.title("NotAMinuteLonger")
    root.resizable(width="false", height="false")
    root.mainloop()



