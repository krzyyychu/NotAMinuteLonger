from model.ActivityRecord import ActivityRecord
from model.Settings import Settings


class Activities:
    """Container class that holds list of activities(stopwatches) data objects, and allows operating on them"""

    def __init__(self, settings: Settings):
        self._activities_list: list[ActivityRecord]= []
        self._settings = settings

    @property
    def length(self):
        return len(self._activities_list)

    def validate_requested_size(self, new_size):
        if not 0 <= new_size < self._settings.stopwatches_limit:
            raise ValueError(
                f"Activities index out of bounds:"
                f"expected: <0,{self._settings.stopwatches_limit}), got: {new_size}")

    def expand_to_requested_size(self, new_size):
        self.validate_requested_size(new_size)
        while new_size >= self.length:
            self._activities_list.append(ActivityRecord(self.length))

    def add_stopwatches_from_json_list(self, stopwatch_list: list[dict]):
        """Expected input:
        + list of dicts generated by json decoding
        + Each dict containing single ActivityRecord"""
        next_index = self.length
        self.validate_requested_size(len(stopwatch_list))
        for stopwatch in stopwatch_list:
            key = list(stopwatch.keys()).pop()
            self._activities_list.append(ActivityRecord(
                stopwatch_id=next_index,
                time=stopwatch.get(key),
                description=key))
            next_index += 1

    def add_time(self, stopwatch_id, value):
        self.expand_to_requested_size(stopwatch_id)
        self._activities_list[stopwatch_id].time += value

    def update_description(self, stopwatch_id, new_description):
        self.expand_to_requested_size(stopwatch_id)
        self._activities_list[stopwatch_id].description = new_description

    def get_time(self, stopwatch_id):
        if 0 <= stopwatch_id < len(self._activities_list):
            return self._activities_list[stopwatch_id].time
        raise IndexError

    def get_time_summary(self):
        return sum([stopwatch.time for stopwatch in self._activities_list])

    def get_description(self, stopwatch_id):
        if 0 <= stopwatch_id < len(self._activities_list):
            return self._activities_list[stopwatch_id].description
        raise IndexError

    def get_stopwatches(self):
        return self._activities_list

