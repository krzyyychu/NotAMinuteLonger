

class StopwatchData:
    def __init__(self, stopwatch_id, time=0, description=""):
        self.id = stopwatch_id
        self.description = description
        self.time = time

    def __repr__(self):
        return f"<model.StopwatchData> {self.id=}, {self.description=}, {self.time=};"


    #TODO: should be proper properties


class ActivityData:
    STOPWATCHES_LIMIT = 20 # to be moved to settings?

    def __init__(self):
        self._stopwatch_data = []

    def length(self):
        return len(self._stopwatch_data)

    @staticmethod
    def validate_requested_size(new_size):
        if not 0 <= new_size < ActivityData.STOPWATCHES_LIMIT:
            raise ValueError(
                f"ActivityData index out of bounds:"
                f"expected: <0,{ActivityData.STOPWATCHES_LIMIT}), got: {new_size}")

    def expand_to_requested_size(self, new_size):
        self.validate_requested_size(new_size)
        while new_size >= self.length():
            self._stopwatch_data.append(StopwatchData(self.length()))

    def add_stopwatches_from_json_list(self, stopwatch_list: list[dict]):
        """Expected input:
        + list of dicts generated by json decoding
        + Each dict containing single key (name) and time in seconds"""
        next_index = self.length()
        self.validate_requested_size(len(stopwatch_list))
        for stopwatch in stopwatch_list:
            key = list(stopwatch.keys()).pop()
            self._stopwatch_data.append(StopwatchData(
                stopwatch_id=next_index,
                time=stopwatch.get(key),
                description=key))
            next_index += 1

    def add_time(self, stopwatch_id, value):
        self.expand_to_requested_size(stopwatch_id)
        self._stopwatch_data[stopwatch_id].time += value

    def update_description(self, stopwatch_id, new_description):
        self.expand_to_requested_size(stopwatch_id)
        self._stopwatch_data[stopwatch_id].description = new_description

    def get_time(self, stopwatch_id):
        if 0 <= stopwatch_id < len(self._stopwatch_data):
            return self._stopwatch_data[stopwatch_id].time
        raise IndexError

    def get_time_summary(self):
        return sum([stopwatch.time for stopwatch in self._stopwatch_data])

    def get_description(self, stopwatch_id):
        if 0 <= stopwatch_id < len(self._stopwatch_data):
            return self._stopwatch_data[stopwatch_id].description
        raise IndexError

    def get_stopwatches(self):
        return self._stopwatch_data

